// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package protobuf;

// The greeting service definition.
service Arena {
  // Sends a greeting
  rpc SayBalance (BalanceRequest) returns (BalanceReply) {}
  rpc LogIn (LoginRequest) returns (LoginReply) {}
  rpc ArenaInitiate (ArenaInitiateRequest) returns (ArenaFindReply) {}
  rpc ArenaAddParry (ArenaAddParryRequest) returns (ParryReply) {}
  rpc ArenaFind (ArenaFindRequest) returns (ArenaFindReply) {}
  rpc ArenaResult (ArenaResultRequest) returns (ArenaResultReply) {}
  rpc News (BalanceRequest) returns (NewsReply) {}
}
 enum ArenaMessageOut{
      GOOD=0;
      BADMESSAGE=1;
      COLLIZION=2;
  } 
message BalanceRequest {
  string tockenID =1;
}

message BalanceReply {
  string name = 1;
  float balance =2;
}
message NewsReply {
  repeated string NewsAlias=1; 
}
message LoginRequest {
  string name =1;
  string password =2;
}
message LoginReply{
  string tockenID =1;
  string name =2;
  float balance =3;
}
message ArenaInitiateRequest{
  string tockenID=1;
  string tockenArena=2;
  string teamTocken =3;
  string Nick =4;
}
message ArenaAddParryRequest{
  int32 IDParry=1;
    string tockenArena=2;
    string tockenID=3;
    string teamTocken =4;
    string Nick =5;
    string ToName =6;
    float Bet=7;
     enum ParryTypeAnswer{
      ADDPARRY=0;
      APPLYPARRY=1;
      DELETEPARRY=2;
  } 
}
message ParryReply{
    ArenaMessageOut m =1;
}
message ArenaFindRequest{
    string tockenArena=1;
    string teamTocken =2;
}
message ArenaFindReply{
  repeated string NamesAlias=1; 
  repeated float BetAlias=2; 
}
message ArenaResultRequest{
  string tockenID=1;
  string tockenArena=2;
  string teamTocken =3;
  string Nick =4;
}
message ArenaResultReply{
  ArenaMessageOut MessageOut=1;
}
